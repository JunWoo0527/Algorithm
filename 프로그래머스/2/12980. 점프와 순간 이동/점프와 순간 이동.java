import java.util.*;

public class Solution {
    public int solution(int n) {
        // K칸 점프 -> K만큼 건전지 소모
        // 현재까지이동거리x2위치로 순간이동 -> 건전지 소모 x
        // 주어진 n 의거리만큼 이동할때 사용되는 건전지 최솟값을 리턴
        
        // 건전지 최솟값이므로 직관적으로 순간이동을 많이사용하는 방법이 최솟값
        // 단, 순간이동은 현재까지 이동거리와 비례함으로 최소한의 1칸의 점프가 필요함 -> 최소 건전지 소모 1
        // 순간이동은 이전 순간이동으로 이동한 거리도 포함함 
        // 순간이동과 점프는 번갈아 사용할 수 도 있다.
        
        // bottom-top식으로 문제를 풀어 볼려했으나 depth가 너무 많은 경우의 수가 존재 
        // top-bottom식으로 역으로 생각해서 풀어봄
        // 순간이동은 2배의 거리위치로 순간이동하기때문에 반드시 짝수가 됨 주어진 n값에서 /2 한위치로 이동..
        // 만약 수가 홀수라면 -1만큼 점프함 이때 배터리 소모 발생 
        
        int answer = 0;
        while (n != 0) {
            if (n % 2 == 0) {
                n /= 2;
            } else {
                n -= 1;
                answer += 1;
            }
        }
        
        return answer;
    }
}